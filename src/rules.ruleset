<?xml version="1.0"?>
<!--
   Conventions used:
      Hidden  - Rules we do not attend to address
      Info    - Rules that should be addressed, but we have deemed low priority
      Warning - Rules that have not been evaluated
      Error   - Rules that have all violations erradicated
-->

<RuleSet Name="All Rules Enabled with default severity" Description="All Rules are enabled with default severity. Rules with IsEnabledByDefault = false are force enabled with default severity." ToolsVersion="15.0">
   <Rules AnalyzerId="Microsoft.CodeAnalysis.FxCopAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.FxCopAnalyzers">
      <Rule Id="CA1000" Action="Error" />            <!-- Do not declare static members on generic types -->
      <Rule Id="CA1001" Action="Error" />            <!-- Types that own disposable fields should be disposable -->
      <Rule Id="CA1003" Action="Error" />            <!-- Use generic event handler instances -->
      <Rule Id="CA1008" Action="Error" />            <!-- Enums should have zero value -->
      <Rule Id="CA1010" Action="Error" />            <!-- Collections should implement generic interface -->
      <Rule Id="CA1012" Action="Hidden" />           <!-- Abstract types should not have constructors -->
      <Rule Id="CA1014" Action="Hidden" />           <!-- Mark assemblies with CLSCompliant -->
      <Rule Id="CA1016" Action="Error" />            <!-- Mark assemblies with assembly version -->
      <Rule Id="CA1017" Action="Error" />            <!-- Mark assemblies with ComVisible -->
      <Rule Id="CA1018" Action="Error" />            <!-- Mark attributes with AttributeUsageAttribute -->
      <Rule Id="CA1019" Action="Error" />            <!-- Define accessors for attribute arguments -->
      <Rule Id="CA1024" Action="Hidden" />           <!-- Use properties where appropriate -->
      <Rule Id="CA1027" Action="Error" />            <!-- Mark enums with FlagsAttribute -->
      <Rule Id="CA1028" Action="Error" />            <!-- Enum Storage should be Int32 -->
      <Rule Id="CA1030" Action="Hidden" />           <!-- Use events where appropriate -->
      <Rule Id="CA1031" Action="Hidden" />           <!-- Do not catch general exception types -->
      <Rule Id="CA1032" Action="Info" />             <!-- Implement standard exception constructors -->
      <Rule Id="CA1033" Action="Hidden" />           <!-- Interface methods should be callable by child types -->
      <Rule Id="CA1034" Action="Hidden" />           <!-- Nested types should not be visible -->
      <Rule Id="CA1036" Action="Error" />            <!-- Override methods on comparable types -->
      <Rule Id="CA1040" Action="Error" />            <!-- Avoid empty interfaces -->
      <Rule Id="CA1041" Action="Error" />            <!-- Provide ObsoleteAttribute message -->
      <Rule Id="CA1043" Action="Error" />            <!-- Use Integral Or String Argument For Indexers -->
      <Rule Id="CA1044" Action="Info" />             <!-- Properties should not be write only -->
      <Rule Id="CA1050" Action="Error" />            <!-- Declare types in namespaces -->
      <Rule Id="CA1051" Action="Hidden" />           <!-- Do not declare visible instance fields -->
      <Rule Id="CA1052" Action="Info" />             <!-- Static holder types should be Static or NotInheritable -->
      <Rule Id="CA1054" Action="Hidden" />           <!-- Uri parameters should not be strings -->
      <Rule Id="CA1055" Action="Hidden" />           <!-- Uri return values should not be strings -->
      <Rule Id="CA1056" Action="Hidden" />           <!-- Uri properties should not be strings -->
      <Rule Id="CA1058" Action="Error" />            <!-- Types should not extend certain base types -->
      <Rule Id="CA1060" Action="Hidden" />           <!-- Move pinvokes to native methods class -->
      <Rule Id="CA1061" Action="Error" />            <!-- Do not hide base class methods -->
      <Rule Id="CA1062" Action="Info" />             <!-- Validate arguments of public methods --> <!-- PARTIALLY COMPLETE -->
      <Rule Id="CA1063" Action="Error" />            <!-- Implement IDisposable Correctly -->
      <Rule Id="CA1064" Action="Error" />            <!-- Exceptions should be public -->
      <Rule Id="CA1065" Action="Error" />            <!-- Do not raise exceptions in unexpected locations -->
      <Rule Id="CA1066" Action="Error" />            <!-- Type {0} should implement IEquatable<T> because it overrides Equals -->
      <Rule Id="CA1067" Action="Error" />            <!-- Override Object.Equals(object) when implementing IEquatable<T> -->
      <Rule Id="CA1068" Action="Error" />            <!-- CancellationToken parameters must come last -->
      <Rule Id="CA1200" Action="Error" />            <!-- Avoid using cref tags with a prefix -->
      <Rule Id="CA1303" Action="Hidden" />           <!-- Do not pass literals as localized parameters -->
      <Rule Id="CA1304" Action="Hidden" />           <!-- Specify CultureInfo -->
      <Rule Id="CA1305" Action="Hidden" />           <!-- Specify IFormatProvider -->
      <Rule Id="CA1307" Action="Info" />             <!-- Specify StringComparison -->
      <Rule Id="CA1308" Action="Info" />             <!-- Normalize strings to uppercase -->
      <Rule Id="CA1309" Action="Info" />             <!-- Use ordinal stringcomparison -->
      <Rule Id="CA1401" Action="Info" />             <!-- P/Invokes should not be visible -->
      <Rule Id="CA1501" Action="Error" />            <!-- Avoid excessive inheritance -->
      <Rule Id="CA1502" Action="Hidden" />           <!-- Avoid excessive complexity -->
      <Rule Id="CA1505" Action="Error" />            <!-- Avoid unmaintainable code -->
      <Rule Id="CA1506" Action="Hidden" />           <!-- Avoid excessive class coupling -->
      <Rule Id="CA1507" Action="Error" />            <!-- Use nameof to express symbol names -->
      <Rule Id="CA1508" Action="Hidden" />           <!-- Avoid dead conditional code --> <!-- TOO MANY FALSE POSITIVES -->
      <Rule Id="CA1509" Action="Error" />            <!-- Invalid entry in code metrics rule specification file -->
      <Rule Id="CA1707" Action="Hidden" />           <!-- Identifiers should not contain underscores --> <!-- Too much work to change now -->
      <Rule Id="CA1708" Action="Info" />             <!-- Identifiers should differ by more than case -->
      <Rule Id="CA1710" Action="Error" />            <!-- Identifiers should have correct suffix -->
      <Rule Id="CA1711" Action="Error" />            <!-- Identifiers should not have incorrect suffix -->
      <Rule Id="CA1712" Action="Error" />            <!-- Do not prefix enum values with type name -->
      <Rule Id="CA1714" Action="Error" />            <!-- Flags enums should have plural names -->
      <Rule Id="CA1715" Action="Error" />            <!-- Identifiers should have correct prefix -->
      <Rule Id="CA1716" Action="Error" />            <!-- Identifiers should not match keywords -->
      <Rule Id="CA1717" Action="Error" />            <!-- Only FlagsAttribute enums should have plural names -->
      <Rule Id="CA1720" Action="Error" />            <!-- Identifier contains type name -->
      <Rule Id="CA1721" Action="Error" />            <!-- Property names should not match get methods -->
      <Rule Id="CA1724" Action="Hidden" />           <!-- Type names should not match namespaces -->
      <Rule Id="CA1725" Action="Hidden" />           <!-- Parameter names should match base declaration -->
      <Rule Id="CA1801" Action="Info" />             <!-- Review unused parameters -->
      <Rule Id="CA1802" Action="Hidden" />           <!-- Use literals where appropriate --> <!-- this flags 'static readonly' as should be 'const' -->
      <Rule Id="CA1806" Action="Info" />             <!-- Do not ignore method results -->
      <Rule Id="CA1810" Action="Error" />            <!-- Initialize reference type static fields inline -->
      <Rule Id="CA1812" Action="Error" />            <!-- Avoid uninstantiated internal classes -->
      <Rule Id="CA1813" Action="Error" />            <!-- Avoid unsealed attributes -->
      <Rule Id="CA1814" Action="Error" />            <!-- Prefer jagged arrays over multidimensional -->
      <Rule Id="CA1815" Action="Info" />             <!-- Override equals and operator equals on value types -->
      <Rule Id="CA1816" Action="Info" />             <!-- Dispose methods should call SuppressFinalize -->
      <Rule Id="CA1819" Action="Hidden" />           <!-- Properties should not return arrays -->
      <Rule Id="CA1820" Action="Info" />             <!-- Test for empty strings using string length -->
      <Rule Id="CA1821" Action="Error" />            <!-- Remove empty Finalizers -->
      <Rule Id="CA1822" Action="Hidden" />           <!-- Mark members as static -->
      <Rule Id="CA1823" Action="Error" />            <!-- Avoid unused private fields -->
      <Rule Id="CA1824" Action="Error" />            <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
      <Rule Id="CA1825" Action="Info" />             <!-- Avoid zero-length array allocations. -->
      <Rule Id="CA1826" Action="Info" />             <!-- Do not use Enumerable methods on indexable collections. Instead use the collection directly -->
      <Rule Id="CA1827" Action="Info" />             <!-- Do not use Count() or LongCount() when Any() can be used -->
      <Rule Id="CA1828" Action="Error" />            <!-- Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used -->
      <Rule Id="CA1829" Action="Info" />             <!-- Use Length/Count property instead of Count() when available -->
      <Rule Id="CA2000" Action="Error" />            <!-- Dispose objects before losing scope -->
      <Rule Id="CA2002" Action="Error" />            <!-- Do not lock on objects with weak identity -->
      <Rule Id="CA2007" Action="Hidden" />           <!-- Consider calling ConfigureAwait on the awaited task -->
      <Rule Id="CA2008" Action="Info" />             <!-- Do not create tasks without passing a TaskScheduler -->
      <Rule Id="CA2009" Action="Error" />            <!-- Do not call ToImmutableCollection on an ImmutableCollection value -->
      <Rule Id="CA2010" Action="Error" />            <!-- Always consume the value returned by methods marked with PreserveSigAttribute -->
      <Rule Id="CA2100" Action="Error" />            <!-- Review SQL queries for security vulnerabilities -->
      <Rule Id="CA2101" Action="Hidden" />           <!-- Specify marshaling for P/Invoke string arguments -->
      <Rule Id="CA2119" Action="Error" />            <!-- Seal methods that satisfy private interfaces -->
      <Rule Id="CA2153" Action="Error" />            <!-- Do Not Catch Corrupted State Exceptions -->
      <Rule Id="CA2200" Action="Error" />            <!-- Rethrow to preserve stack details. -->
      <Rule Id="CA2201" Action="Info" />             <!-- Do not raise reserved exception types -->
      <Rule Id="CA2207" Action="Error" />            <!-- Initialize value type static fields inline -->
      <Rule Id="CA2208" Action="Info" />             <!-- Instantiate argument exceptions correctly -->
      <Rule Id="CA2211" Action="Info" />             <!-- Non-constant fields should not be visible -->
      <Rule Id="CA2213" Action="Error" />            <!-- Disposable fields should be disposed -->
      <Rule Id="CA2214" Action="Error" />            <!-- Do not call overridable methods in constructors -->
      <Rule Id="CA2216" Action="Error" />            <!-- Disposable types should declare finalizer -->
      <Rule Id="CA2217" Action="Info" />             <!-- Do not mark enums with FlagsAttribute -->
      <Rule Id="CA2218" Action="Error" />            <!-- Override GetHashCode on overriding Equals -->
      <Rule Id="CA2219" Action="Error" />            <!-- Do not raise exceptions in finally clauses -->
      <Rule Id="CA2224" Action="Error" />            <!-- Override Equals on overloading operator equals -->
      <Rule Id="CA2225" Action="Error" />            <!-- Operator overloads have named alternates -->
      <Rule Id="CA2226" Action="Error" />            <!-- Operators should have symmetrical overloads -->
      <Rule Id="CA2227" Action="Info" />             <!-- Collection properties should be read only -->
      <Rule Id="CA2229" Action="Error" />            <!-- Implement serialization constructors -->
      <Rule Id="CA2231" Action="Error" />            <!-- Overload operator equals on overriding value type Equals -->
      <Rule Id="CA2234" Action="Info" />             <!-- Pass system uri objects instead of strings -->
      <Rule Id="CA2235" Action="Error" />            <!-- Mark all non-serializable fields -->
      <Rule Id="CA2237" Action="Error" />            <!-- Mark ISerializable types with serializable -->
      <Rule Id="CA2241" Action="Error" />            <!-- Provide correct arguments to formatting methods -->
      <Rule Id="CA2242" Action="Error" />            <!-- Test for NaN correctly -->
      <Rule Id="CA2243" Action="Error" />            <!-- Attribute string literals should parse correctly -->
      <Rule Id="CA2244" Action="Error" />            <!-- Do not duplicate indexed element initializations -->
      <Rule Id="CA2245" Action="Error" />            <!-- Do not assign a property to itself. -->
      <Rule Id="CA2246" Action="Error" />            <!-- Assigning symbol and its member in the same statement. -->
      <Rule Id="CA2300" Action="Error" />            <!-- Do not use insecure deserializer BinaryFormatter -->
      <Rule Id="CA2301" Action="Error" />            <!-- Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder -->
      <Rule Id="CA2302" Action="Error" />            <!-- Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize -->
      <Rule Id="CA2305" Action="Error" />            <!-- Do not use insecure deserializer LosFormatter -->
      <Rule Id="CA2310" Action="Error" />            <!-- Do not use insecure deserializer NetDataContractSerializer -->
      <Rule Id="CA2311" Action="Error" />            <!-- Do not deserialize without first setting NetDataContractSerializer.Binder -->
      <Rule Id="CA2312" Action="Error" />            <!-- Ensure NetDataContractSerializer.Binder is set before deserializing -->
      <Rule Id="CA2315" Action="Error" />            <!-- Do not use insecure deserializer ObjectStateFormatter -->
      <Rule Id="CA2321" Action="Error" />            <!-- Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver -->
      <Rule Id="CA2322" Action="Error" />            <!-- Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing -->
      <Rule Id="CA2326" Action="Error" />            <!-- Do not use TypeNameHandling values other than None -->
      <Rule Id="CA2327" Action="Error" />            <!-- Do not use insecure JsonSerializerSettings -->
      <Rule Id="CA2328" Action="Error" />            <!-- Ensure that JsonSerializerSettings are secure -->
      <Rule Id="CA2329" Action="Error" />            <!-- Do not deserialize with JsonSerializer using an insecure configuration -->
      <Rule Id="CA2330" Action="Error" />            <!-- Ensure that JsonSerializer has a secure configuration when deserializing -->
      <Rule Id="CA3001" Action="Error" />            <!-- Review code for SQL injection vulnerabilities -->
      <Rule Id="CA3002" Action="Error" />            <!-- Review code for XSS vulnerabilities -->
      <Rule Id="CA3003" Action="Error" />            <!-- Review code for file path injection vulnerabilities -->
      <Rule Id="CA3004" Action="Error" />            <!-- Review code for information disclosure vulnerabilities -->
      <Rule Id="CA3005" Action="Error" />            <!-- Review code for LDAP injection vulnerabilities -->
      <Rule Id="CA3006" Action="Error" />            <!-- Review code for process command injection vulnerabilities -->
      <Rule Id="CA3007" Action="Error" />            <!-- Review code for open redirect vulnerabilities -->
      <Rule Id="CA3008" Action="Error" />            <!-- Review code for XPath injection vulnerabilities -->
      <Rule Id="CA3009" Action="Error" />            <!-- Review code for XML injection vulnerabilities -->
      <Rule Id="CA3010" Action="Error" />            <!-- Review code for XAML injection vulnerabilities -->
      <Rule Id="CA3011" Action="Error" />            <!-- Review code for DLL injection vulnerabilities -->
      <Rule Id="CA3012" Action="Error" />            <!-- Review code for regex injection vulnerabilities -->
      <Rule Id="CA3061" Action="Error" />            <!-- Do Not Add Schema By URL -->
      <Rule Id="CA3075" Action="Error" />            <!-- Insecure DTD processing in XML -->
      <Rule Id="CA3076" Action="Error" />            <!-- Insecure XSLT script processing. -->
      <Rule Id="CA3077" Action="Error" />            <!-- Insecure Processing in API Design, XmlDocument and XmlTextReader -->
      <Rule Id="CA3147" Action="Error" />            <!-- Mark Verb Handlers With Validate Antiforgery Token -->
      <Rule Id="CA5350" Action="Error" />            <!-- Do Not Use Weak Cryptographic Algorithms -->
      <Rule Id="CA5351" Action="Error" />            <!-- Do Not Use Broken Cryptographic Algorithms -->
      <Rule Id="CA5358" Action="Error" />            <!-- Do Not Use Unsafe Cipher Modes -->
      <Rule Id="CA5359" Action="Error" />            <!-- Do Not Disable Certificate Validation -->
      <Rule Id="CA5360" Action="Error" />            <!-- Do Not Call Dangerous Methods In Deserialization -->
      <Rule Id="CA5361" Action="Error" />            <!-- Do Not Disable SChannel Use of Strong Crypto -->
      <Rule Id="CA5362" Action="Error" />            <!-- Do Not Refer Self In Serializable Class -->
      <Rule Id="CA5363" Action="Error" />            <!-- Do Not Disable Request Validation -->
      <Rule Id="CA5364" Action="Error" />            <!-- Do Not Use Deprecated Security Protocols -->
      <Rule Id="CA5365" Action="Error" />            <!-- Do Not Disable HTTP Header Checking -->
      <Rule Id="CA5366" Action="Error" />            <!-- Use XmlReader For DataSet Read Xml -->
      <Rule Id="CA5367" Action="Error" />            <!-- Do Not Serialize Types With Pointer Fields -->
      <Rule Id="CA5368" Action="Error" />            <!-- Set ViewStateUserKey For Classes Derived From Page -->
      <Rule Id="CA5369" Action="Info" />             <!-- Use XmlReader For Deserialize -->
      <Rule Id="CA5370" Action="Error" />            <!-- Use XmlReader For Validating Reader -->
      <Rule Id="CA5371" Action="Error" />            <!-- Use XmlReader For Schema Read -->
      <Rule Id="CA5372" Action="Error" />            <!-- Use XmlReader For XPathDocument -->
      <Rule Id="CA5373" Action="Error" />            <!-- Do not use obsolete key derivation function -->
      <Rule Id="CA5374" Action="Error" />            <!-- Do Not Use XslTransform -->
      <Rule Id="CA5375" Action="Error" />            <!-- Do Not Use Account Shared Access Signature -->
      <Rule Id="CA5376" Action="Error" />            <!-- Use SharedAccessProtocol HttpsOnly -->
      <Rule Id="CA5377" Action="Error" />            <!-- Use Container Level Access Policy -->
      <Rule Id="CA5378" Action="Error" />            <!-- Do not disable ServicePointManagerSecurityProtocols -->
      <Rule Id="CA5379" Action="Error" />            <!-- Do Not Use Weak Key Derivation Function Algorithm -->
      <Rule Id="CA5380" Action="Error" />            <!-- Do Not Add Certificates To Root Store -->
      <Rule Id="CA5381" Action="Error" />            <!-- Ensure Certificates Are Not Added To Root Store -->
      <Rule Id="CA5382" Action="Error" />            <!-- Use Secure Cookies In ASP.Net Core -->
      <Rule Id="CA5383" Action="Error" />            <!-- Ensure Use Secure Cookies In ASP.Net Core -->
      <Rule Id="CA5384" Action="Error" />            <!-- Do Not Use Digital Signature Algorithm (DSA) -->
      <Rule Id="CA5385" Action="Error" />            <!-- Use Rivest–Shamir–Adleman (RSA) Algorithm With Sufficient Key Size -->
      <Rule Id="CA5386" Action="Error" />            <!-- Avoid hardcoding SecurityProtocolType value -->
      <Rule Id="CA5387" Action="Error" />            <!-- Do Not Use Weak Key Derivation Function With Insufficient Iteration Count -->
      <Rule Id="CA5388" Action="Error" />            <!-- Ensure Sufficient Iteration Count When Using Weak Key Derivation Function -->
      <Rule Id="CA5389" Action="Error" />            <!-- Do Not Add Archive Item's Path To The Target File System Path -->
      <Rule Id="CA5390" Action="Error" />            <!-- Do not hard-code encryption key -->
      <Rule Id="CA5391" Action="Error" />            <!-- Use antiforgery tokens in ASP.NET Core MVC controllers -->
      <Rule Id="CA5392" Action="Hidden" />           <!-- Use DefaultDllImportSearchPaths attribute for P/Invokes -->
      <Rule Id="CA5393" Action="Error" />            <!-- Do not use unsafe DllImportSearchPath value -->
      <Rule Id="CA5394" Action="Error" />            <!-- Do not use insecure randomness -->
      <Rule Id="CA5395" Action="Error" />            <!-- Miss HttpVerb attribute for action methods -->
      <Rule Id="CA5396" Action="Error" />            <!-- Set HttpOnly to true for HttpCookie -->
      <Rule Id="CA5397" Action="Error" />            <!-- Do not use deprecated SslProtocols values -->
      <Rule Id="CA5398" Action="Error" />            <!-- Avoid hardcoded SslProtocols values -->
      <Rule Id="CA5399" Action="Error" />            <!-- HttpClients should enable certificate revocation list checks -->
      <Rule Id="CA5400" Action="Error" />            <!-- Ensure HttpClient certificate revocation list check is not disabled -->
      <Rule Id="CA5401" Action="Info" />             <!-- Do not use CreateEncryptor with non-default IV -->
      <Rule Id="CA5402" Action="Error" />            <!-- Use CreateEncryptor with the default IV  -->
      <Rule Id="CA5403" Action="Error" />            <!-- Do not hard-code certificate -->
      <Rule Id="CA9999" Action="Error" />            <!-- Analyzer version mismatch -->
   </Rules>
</RuleSet>
